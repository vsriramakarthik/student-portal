{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token is invalid, redirect to login\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const studentApi = {\n  // Get all students\n  getAllStudents: async () => {\n    const response = await api.get('/students');\n    return response.data.data;\n  },\n  // Get students by department\n  getStudentsByDepartment: async department => {\n    const response = await api.get(`/students/department/${encodeURIComponent(department)}`);\n    return response.data.data;\n  },\n  // Create a new student\n  createStudent: async student => {\n    const response = await api.post('/students', student);\n    return response.data.data;\n  },\n  // Update a student\n  updateStudent: async (id, student) => {\n    const response = await api.put(`/students/${id}`, student);\n    return response.data.data;\n  },\n  // Delete a student\n  deleteStudent: async id => {\n    await api.delete(`/students/${id}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","studentApi","getAllStudents","get","data","getStudentsByDepartment","department","encodeURIComponent","createStudent","student","post","updateStudent","id","put","deleteStudent","delete"],"sources":["C:/StudentPortal/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token is invalid, redirect to login\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const studentApi = {\r\n  // Get all students\r\n  getAllStudents: async () => {\r\n    const response = await api.get('/students');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Get students by department\r\n  getStudentsByDepartment: async (department) => {\r\n    const response = await api.get(`/students/department/${encodeURIComponent(department)}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Create a new student\r\n  createStudent: async (student) => {\r\n    const response = await api.post('/students', student);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Update a student\r\n  updateStudent: async (id, student) => {\r\n    const response = await api.put(`/students/${id}`, student);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Delete a student\r\n  deleteStudent: async (id) => {\r\n    await api.delete(`/students/${id}`);\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG;EACxB;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMR,QAAQ,GAAG,MAAMf,GAAG,CAACwB,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOT,QAAQ,CAACU,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAC,uBAAuB,EAAE,MAAOC,UAAU,IAAK;IAC7C,MAAMZ,QAAQ,GAAG,MAAMf,GAAG,CAACwB,GAAG,CAAC,wBAAwBI,kBAAkB,CAACD,UAAU,CAAC,EAAE,CAAC;IACxF,OAAOZ,QAAQ,CAACU,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAI,aAAa,EAAE,MAAOC,OAAO,IAAK;IAChC,MAAMf,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC;IACrD,OAAOf,QAAQ,CAACU,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAO,aAAa,EAAE,MAAAA,CAAOC,EAAE,EAAEH,OAAO,KAAK;IACpC,MAAMf,QAAQ,GAAG,MAAMf,GAAG,CAACkC,GAAG,CAAC,aAAaD,EAAE,EAAE,EAAEH,OAAO,CAAC;IAC1D,OAAOf,QAAQ,CAACU,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAU,aAAa,EAAE,MAAOF,EAAE,IAAK;IAC3B,MAAMjC,GAAG,CAACoC,MAAM,CAAC,aAAaH,EAAE,EAAE,CAAC;EACrC;AACF,CAAC;AAED,eAAejC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}